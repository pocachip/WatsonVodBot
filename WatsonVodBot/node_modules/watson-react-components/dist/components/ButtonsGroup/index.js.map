{"version":3,"sources":["ButtonsGroup/index.js"],"names":["ButtonsGroup","expandedWidths","props","buttons","length","map","button","index","display","marginTop","width","isExpanded","minWidth","type","id","name","value","selected","onClick","onChange","text","Component","propTypes","oneOf","bool","string","isRequired","arrayOf","shape","oneOfType","number","element","node","func","defaultProps"],"mappings":"okBAAA,4B,2CACA,qC,mDACA,sC,y7BAEqBA,a,6TA+BV,iBACP,GAAMC,gBAAoB,IAAO,KAAKC,KAAL,CAAWC,OAAX,CAAmBC,MAA9C,IAAN,CACA,MACE,sCAAK,UAAU,eAAf,EACG,KAAKF,KAAL,CAAWC,OAAX,CAAmBE,GAAnB,CAAuB,SAACC,MAAD,CAASC,KAAT,QACtB,sCACE,MAAO,CACLC,QAAS,cADJ,CAELC,UAAW,MAFN,CAGLC,UAAU,OAAKR,KAAL,CAAWS,UAAX,CAAwBV,cAAxB,CAAyC,OAAKC,KAAL,CAAWU,QAA9D,CAHK,CADT,CAME,IAAKL,KANP,EAQE,uCACE,UAAU,kCADZ,CAEE,KAAM,OAAKL,KAAL,CAAWW,IAFnB,CAGE,GAAIP,OAAOQ,EAAP,EAAgB,OAAKZ,KAAL,CAAWa,IAA3B,KAAmCT,OAAOU,KAHhD,CAIE,KAAM,OAAKd,KAAL,CAAWa,IAJnB,CAKE,QAAST,OAAOW,QALlB,CAME,MAAOX,OAAOU,KANhB,CAOE,QAAS,OAAKd,KAAL,CAAWgB,OAPtB,CAQE,SAAU,OAAKhB,KAAL,CAAWiB,QARvB,EARF,CAkBE,uCACE,UAAW,yBACT,oBADS,CAET,cAFS,CAGT,uBAHS,CAIT,CAAE,8BAA+BZ,QAAU,CAA3C,CAJS,CAKT,CAAE,6BAA8BA,QAAU,OAAKL,KAAL,CAAWC,OAAX,CAAmBC,MAAnB,CAA4B,CAAtE,CALS,CADb,CAQE,MAAO,CACLM,MAAO,MADF,CART,CAWE,QAASJ,OAAOQ,EAXlB,CAYE,MAAOR,OAAOc,IAZhB,EAcGd,OAAOc,IAdV,CAlBF,CADsB,EAAvB,CADH,CADF,CAyCD,C,0BA1EuC,gBAAMC,S,EAA3BrB,Y,CAEZsB,S,CAAY,CACjBT,KAAM,oBAAUU,KAAV,CAAgB,CAAC,QAAD,CAAW,OAAX,CAAoB,UAApB,CAAhB,CADW,CAEjBZ,WAAY,oBAAUa,IAFL,CAGjBZ,SAAU,oBAAUa,MAHH,CAGW;AAC5BV,KAAM,oBAAUU,MAAV,CAAiBC,UAJN,CAKjBvB,QAAS,oBAAUwB,OAAV,CAAkB,oBAAUC,KAAV,CAAgB,CACzCZ,MAAO,oBAAUa,SAAV,CAAoB,CAAC,oBAAUC,MAAX,CAAmB,oBAAUL,MAA7B,CAApB,CADkC,CAEzCX,GAAI,oBAAUW,MAF2B,CAGzC;AACAL,KAAM,oBAAUS,SAAV,CAAoB,CACxB,oBAAUE,OADc,CAExB,oBAAUJ,OAAV,CAAkB,oBAAUK,IAA5B,CAFwB,CAGxB,oBAAUA,IAHc,CAIxB,oBAAUP,MAJc,CAApB,EAKHC,UATsC,CAUzCT,SAAU,oBAAUO,IAVqB,CAAhB,CAAlB,EAWLE,UAhBa,CAiBjBR,QAAS,oBAAUe,IAjBF,CAkBjBd,SAAU,oBAAUc,IAlBH,C,CAFAjC,Y,CAuBZkC,Y,CAAe,CACpBrB,KAAM,QADc,CAEpBF,WAAY,IAFQ,CAGpBC,SAAU,OAHU,CAIpBM,QAAS,kBAAM,CAAE,CAJG,CAKpBC,SAAU,mBAAM,CAAE,CALE,C,iBAvBHnB,Y","file":"index.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\n\nexport default class ButtonsGroup extends React.Component {\n\n  static propTypes = {\n    type: PropTypes.oneOf(['button', 'radio', 'checkbox']),\n    isExpanded: PropTypes.bool,\n    minWidth: PropTypes.string, // will be overrided if isExpanded is true\n    name: PropTypes.string.isRequired,\n    buttons: PropTypes.arrayOf(PropTypes.shape({\n      value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n      id: PropTypes.string,\n      // text is either an element or string\n      text: PropTypes.oneOfType([\n        PropTypes.element,\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node,\n        PropTypes.string,\n      ]).isRequired,\n      selected: PropTypes.bool,\n    })).isRequired,\n    onClick: PropTypes.func,\n    onChange: PropTypes.func,\n  };\n\n  static defaultProps = {\n    type: 'button',\n    isExpanded: true,\n    minWidth: '10rem',\n    onClick: () => {},\n    onChange: () => {},\n  };\n\n  render() {\n    const expandedWidths = `${100 / (this.props.buttons.length)}%`;\n    return (\n      <div className=\"buttons-group\">\n        {this.props.buttons.map((button, index) => (\n          <div\n            style={{\n              display: 'inline-block',\n              marginTop: '0rem',\n              width: `${this.props.isExpanded ? expandedWidths : this.props.minWidth}`,\n            }}\n            key={index}\n          >\n            <input\n              className=\"base--radio buttons-group--radio\"\n              type={this.props.type}\n              id={button.id || `${this.props.name}-${button.value}`}\n              name={this.props.name}\n              checked={button.selected}\n              value={button.value}\n              onClick={this.props.onClick}\n              onChange={this.props.onChange}\n            />\n            <label\n              className={classNames(\n                'base--inline-label',\n                'base--button',\n                'buttons-group--button',\n                { 'buttons-group--button_first': index === 0 },\n                { 'buttons-group--button_last': index === this.props.buttons.length - 1 }\n              )}\n              style={{\n                width: '100%',\n              }}\n              htmlFor={button.id}\n              title={button.text}\n            >\n              {button.text}\n            </label>\n          </div>\n        ))}\n      </div>\n    );\n  }\n}\n"]}